/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three';

export function Model(props) {
  const group = useRef()
  const { nodes, materials } = useGLTF('monitor_room/Security_Camera_single.glb')

  useFrame((state) => {
    const target = new THREE.Vector3(state.mouse.x*8, state.mouse.y*6, 5);
    group.current.getObjectByName('head').lookAt(target)
    group.current.getObjectByName('connect').lookAt(target)
  });

  return (
    <group {...props} ref={group} dispose={null}>
      <group name="Scene">
        <mesh
          name="connect"
          castShadow
          receiveShadow
          geometry={nodes.connect.geometry}
          material={materials['Material.002']}
        />
        <group name="head">
          <mesh
            name="Cylinder001"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder001.geometry}
            material={materials['Material.002']}
          />
          <mesh
            name="Cylinder001_1"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder001_1.geometry}
            material={materials['white.001']}
          />
          <mesh
            name="Cylinder001_2"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder001_2.geometry}
            material={materials['nail.001']}
          />
          <mesh
            name="Cylinder001_3"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder001_3.geometry}
            material={materials['black.001']}
          />
          <mesh
            name="Cylinder001_4"
            castShadow
            receiveShadow
            geometry={nodes.Cylinder001_4.geometry}
            material={materials['camera.001']}
          />
        </group>
        <group name="stand">
          <mesh
            name="Cube003"
            castShadow
            receiveShadow
            geometry={nodes.Cube003.geometry}
            material={materials['Material.002']}
          />
          <mesh
            name="Cube003_1"
            castShadow
            receiveShadow
            geometry={nodes.Cube003_1.geometry}
            material={materials['nail.001']}
          />
        </group>
      </group>
      {/* <LEDs />  Add this line to include LEDs */}
    </group>
  )
}

// function LEDs() {
//   const ref = useRef();
//   useFrame((state) => {
//     ref.current.children.forEach((mesh, i) => {
//       const t = (1 + Math.sin(state.clock.elapsedTime + i)) / 2;
//       mesh.material.color.setRGB(t, 0, 0); // Set to red, vary intensity
//     });
//   });

//   return (
//     <group ref={ref}>
//       {/* Example positions, add as necessary based on your model structure */}
//       <mesh position={[0, -0.1, -0.2]}>
//         <sphereGeometry args={[0.01, 16, 16]} />
//         <meshBasicMaterial color="red" />
//       </mesh>
//       {/* Add more LEDs as needed */}
//     </group>
//   );
// }

useGLTF.preload('monitor_room/Security_Camera_single.glb')
